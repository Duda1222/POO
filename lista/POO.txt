import java.util.ArrayList;
import java.util.List;


// Classe Movimentacao
class Movimentacao {
    private String descricao;
    private double valor;
    private boolean isCredito;


    // Construtor da classe Movimentacao
    public Movimentacao(String descricao, double valor, boolean isCredito) {
        this.descricao = descricao;
        this.valor = valor;
        this.isCredito = isCredito;
    }


    // Métodos getter para descrição, valor e tipo de movimentação
    public String getDescricao() {
        return descricao;
    }


    public double getValor() {
        return valor;
    }


    public boolean isCredito() {
        return isCredito;
    }
}


// Classe ContaCorrente
class ContaCorrente {
    private int numero;
    private double saldo;
    private boolean isEspecial;
    private double limite;
    private List<Movimentacao> movimentacoes;


    // Construtor da classe ContaCorrente
    public ContaCorrente(int numero, double saldo, boolean isEspecial, double limite) {
        this.numero = numero;
        this.saldo = saldo;
        this.isEspecial = isEspecial;
        this.limite = limite;
        this.movimentacoes = new ArrayList<>();
    }


    // Método para verificar se a conta é especial
    public boolean isEspecial() {
        return isEspecial;
    }


    // Método para fazer saques (considerando o limite)
    public void sacar(double valor) {
        if (saldo - valor >= -limite) {
            saldo -= valor;
            Movimentacao movimentacao = new Movimentacao("Saque", valor, false);
            movimentacoes.add(movimentacao);
        } else {
            System.out.println("Saldo insuficiente para o saque.");
        }
    }


    // Método para fazer depósitos
    public void depositar(double valor) {
        saldo += valor;
        Movimentacao movimentacao = new Movimentacao("Depósito", valor, true);
        movimentacoes.add(movimentacao);
    }


    // Método para emitir saldo
    public void emitirSaldo() {
        System.out.println("Saldo atual: R$ " + saldo);
    }


    // Método para emitir extrato
    public void emitirExtrato() {
        System.out.println("Extrato:");
        for (Movimentacao movimentacao : movimentacoes) {
            System.out.println(movimentacao.getDescricao() + ": R$ " + movimentacao.getValor() + " (" +
                    (movimentacao.isCredito() ? "Crédito" : "Débito") + ")");
        }
        System.out.println("Saldo atual: R$ " + saldo);
    }


    // Método para realizar transferências entre contas
    public void transferir(ContaCorrente destino, double valor) {
        if (saldo - valor >= -limite) {
            saldo -= valor;
            Movimentacao movimentacaoDebito = new Movimentacao("Transferência para conta " + destino.getNumero(), valor, false);
            movimentacoes.add(movimentacaoDebito);
            destino.depositar(valor);
            Movimentacao movimentacaoCredito = new Movimentacao("Transferência recebida da conta " + numero, valor, true);
            destino.movimentacoes.add(movimentacaoCredito);
            System.out.println("Transferência realizada com sucesso.");
        } else {
            System.out.println("Saldo insuficiente para a transferência.");
        }
    }


    // Métodos getter para número e limite da conta
    public int getNumero() {
        return numero;
    }


    public double getLimite() {
        return limite;
    }
}


// Classe Banco
class Banco {
    private List<ContaCorrente> contas;


    // Construtor da classe Banco
    public Banco() {
        this.contas = new ArrayList<>();
    }


    // Método para criar conta
    public void criarConta(int numero, double saldoInicial, boolean isEspecial, double limite) {
        ContaCorrente conta = new ContaCorrente(numero, saldoInicial, isEspecial, limite);
        contas.add(conta);
        System.out.println("Conta criada com sucesso. Número da conta: " + numero);
    }


    // Método para excluir conta
    public void excluirConta(int numero) {
        for (ContaCorrente conta : contas) {
            if (conta.getNumero() == numero) {
                contaRemover = conta;
                break;
            }
        }
        if (contaRemover != null) {
            contas.remove(contaRemover);
            System.out.println("Conta " + numero + " excluída com sucesso.");
        } else {
            System.out.println("Conta não encontrada.");
        }
    }


    // Método para listar contas
    public void listarContas() {
        System.out.println("Lista de Contas:");
        for (ContaCorrente conta : contas) {
            System.out.println("Número: " + conta.getNumero() +
                    ", Saldo: R$ " + conta.getSaldo() +
                    ", Limite: R$ " + conta.getLimite() +
                    ", Especial: " + (conta.isEspecial() ? "Sim" : "Não"));
        }
    }
}


// Classe de teste para o banco
public class BancoTeste {
    public static void main(String[] args) {
        // Criando um banco
        Banco banco = new Banco();


        // Criando algumas contas
        banco.criarConta(1001, 5000.0, true, 1000.0);
        banco.criarConta(1002, 3000.0, false, 500.0);
        banco.criarConta(1003, 10000.0, true, 2000.0);


        // Listando as contas
        banco.listarContas();


        // Excluindo uma conta
        banco.excluirConta(1002);


        // Listando as contas após exclusão
        banco.listarContas();
    }
}